openapi: 3.0.0
info:
  title: Real-Time Ranking API
  version: 1.0.0
paths:
  /rankings/{top}:
    get:
      summary: Get real-time video rankings
      description: Retrieve the current rankings of videos based on real-time data.
      parameters:
        - name: top
          in: path
          description: The maximum number of rankings to retrieve
          required: false
          schema:
            type: integer
            format: int64
            default: 10
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RankingsResponse'

  /rankings/{top}/{userID}:
    get:
      summary: Get real-time rankings for a specific user
      description: Retrieve the rankings for a user based on their unique userID.

      parameters:
        - name: userID
          in: path
          description: The user ID to fetch rankings for.
          required: true
          schema:
            type: string
        - name: top
          in: path
          description: The maximum number of rankings to retrieve
          required: false
          schema:
            type: integer
            format: int64
            default: 10
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRankingResponse'

  /interactions:
    post:
      summary: Handle interactions (e.g., update user ranking or interactions with the video)
      description: Receive and process interactions such as voting or user engagement with a video.
      responses:
        '200':
          description: Interaction successfully processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InteractionResponse'

  /users:
    post:
      summary: Create a new user
      description: Create a user in the system with a UUID string ID and a display name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request payload
        '500':
          description: Internal server error

  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

    put:
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    delete:
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully

  /videos:
    post:
      summary: Create a video
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVideoRequest'
      responses:
        '201':
          description: Video created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoResponse'

  /videos/{id}:
    get:
      summary: Get a video by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Video retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoResponse'
        '404':
          description: Video not found

    put:
      summary: Update a video by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVideoRequest'
      responses:
        '200':
          description: Video updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoResponse'

    delete:
      summary: Delete a video by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Video deleted successfully

components:
  schemas:
    RankingsResponse:
      type: object
      properties:
        rankings:
          type: array
          items:
            $ref: '#/components/schemas/VideoRank'
    VideoRank:
      type: object
      properties:
        video_id:
          type: string
        score:
          type: number
          format: float

    UserRankingResponse:
      type: object
      properties:
        user_id:
          type: string
        rank:
          type: integer
        points:
          type: number
          format: float

    InteractionResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
          enum:
            - success
            - failure

    CreateUserRequest:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
          example: "Alice"
        email:
          type: string
          example: "me@example.com"

    UpdateUserRequest:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
          format: email

    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string

    CreateVideoRequest:
      type: object
      required: [ title, url, owner_id ]
      properties:
        title:
          type: string
        description:
          type: string
        url:
          type: string
        thumbnail:
          type: string
        owner_id:
          type: string

    UpdateVideoRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        thumbnail:
          type: string

    VideoResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
        thumbnail:
          type: string
        owner_id:
          type: string
        views:
          type: integer
          format: int64
        likes:
          type: integer
          format: int64
        comments:
          type: integer
          format: int64
        shares:
          type: integer
          format: int64
        watch_time:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time