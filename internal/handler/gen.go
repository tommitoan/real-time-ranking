// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package handler

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for InteractionResponseStatus.
const (
	Failure InteractionResponseStatus = "failure"
	Success InteractionResponseStatus = "success"
)

// InteractionResponse defines model for InteractionResponse.
type InteractionResponse struct {
	Message *string                    `json:"message,omitempty"`
	Status  *InteractionResponseStatus `json:"status,omitempty"`
}

// InteractionResponseStatus defines model for InteractionResponse.Status.
type InteractionResponseStatus string

// RankingsResponse defines model for RankingsResponse.
type RankingsResponse struct {
	Rankings *[]VideoRank `json:"rankings,omitempty"`
}

// UserRankingResponse defines model for UserRankingResponse.
type UserRankingResponse struct {
	Points *float32 `json:"points,omitempty"`
	Rank   *int     `json:"rank,omitempty"`
	UserId *string  `json:"user_id,omitempty"`
}

// VideoRank defines model for VideoRank.
type VideoRank struct {
	Score   *float32 `json:"score,omitempty"`
	VideoId *string  `json:"video_id,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Handle interactions (e.g., update user ranking or interactions with the video)
	// (POST /interactions)
	PostInteractions(w http.ResponseWriter, r *http.Request)
	// Get real-time video rankings
	// (GET /rankings)
	GetRankings(w http.ResponseWriter, r *http.Request)
	// Get real-time rankings for a specific user
	// (GET /rankings/user/{userID})
	GetRankingsUserUserID(w http.ResponseWriter, r *http.Request, userID string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Handle interactions (e.g., update user ranking or interactions with the video)
// (POST /interactions)
func (_ Unimplemented) PostInteractions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get real-time video rankings
// (GET /rankings)
func (_ Unimplemented) GetRankings(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get real-time rankings for a specific user
// (GET /rankings/user/{userID})
func (_ Unimplemented) GetRankingsUserUserID(w http.ResponseWriter, r *http.Request, userID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostInteractions operation middleware
func (siw *ServerInterfaceWrapper) PostInteractions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInteractions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRankings operation middleware
func (siw *ServerInterfaceWrapper) GetRankings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRankings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRankingsUserUserID operation middleware
func (siw *ServerInterfaceWrapper) GetRankingsUserUserID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userID", runtime.ParamLocationPath, chi.URLParam(r, "userID"), &userID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRankingsUserUserID(w, r, userID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/interactions", wrapper.PostInteractions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rankings", wrapper.GetRankings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/rankings/user/{userID}", wrapper.GetRankingsUserUserID)
	})

	return r
}
